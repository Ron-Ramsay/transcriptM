#!/usr/bin/env python

""" Main callable module to run TranscriptM: rapid-throughput pipeline of meta-transcriptomes. 
	  See http://http://transcriptm.tiddlyspot.com/
"""

print "rkr: test 3"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python Standard Library modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import os        # miscellaneous operating system interfaces. (Python Standard Library module).
import argparse  # parser for command-line options, arguments and sub-commands. (Python Standard Library module).
                 # NB. `argparse` only seems to be directly used here to be inherited by another class `CustomHelpFormatter`.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# External, non-standard modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import ruffus.cmdline as cmdline  # light-weight computational pipeline management. 
                                  # non-standard module. See http://www.ruffus.org.uk.
import tempdir  # encapsulates temporary directories which just disappear after use. 
                # non-standard module. See https://pypi.python.org/pypi/tempdir/

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Locally written modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import transcriptm.__init__
from transcriptm.pipeline import Pipeline as tm_Pipeline  # custom pipeline class.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def parser_built_with_ruffus(objTempDir):
    ''' returns a command line parser (of type `argparse.ArgumentParser`) that is built with options specific to our program and `ruffus`.
        Parameters: `objTempDir`: a `tempdir.TempDir` object (specifying a working directory to be used if needed).
        '''
    class CustomHelpFormatter(argparse.HelpFormatter):
        ''' This class is a remodelling of `argparse.HelpFormatter`.
            It is used by being passed as a class, to cmdline.get_argparse(..., formatter_class=CustomHelpFormatter).
            However, in doing so, our custom class redefines methods that are not part of `argparse.HelpFormatter`'s API. 
            Therefore there exists the potential for our code to break if these methods 
            (which are supposed to be a non-public implementation) are remodelled in a newer version of `argparse`.
            '''
        def _split_lines(self, text, width): # redefinition.
            return text.splitlines()
        def _get_help_string(self, action): # redefinition.
            h = action.help
            if '%(default)' not in action.help:
                if action.default != '' and \
                   action.default != [] and \
                   action.default != None :
                    if action.default is not argparse.SUPPRESS:
                        defaulting_nargs = [argparse.OPTIONAL,
                                            argparse.ZERO_OR_MORE]
                        if (action.option_strings or action.nargs in defaulting_nargs) :
                            if not (type(action.default)==str and len(action.default)>50):
                                if '\n' in h:
                                    lines = h.splitlines()
                                    lines[0] += ' [default: %(default)s]'
                                    h = '\n'.join(lines)
                                else:
                                    h += ' [default: %(default)s]'
            if action.required:
                if '\n' in h:
                    lines = h.splitlines()
                    lines[0] += ' \033[0;32m|REQUIRED\033[00m'
                    h = '\n'.join(lines)
                else:
                    h += ' \033[0;32m|REQUIRED\033[00m'
            return h
        def _fill_text(self, text, width, indent): # redefinition.
            return ''.join([indent + line for line in text.splitlines(True)])
            
	## Args
    parser = cmdline.get_argparse(description='''
                    ===============================                       
                    |       transcriptM v%s      |
                    ===============================    

   -------------------------------------------------------------------------   
       Process metatranscriptomic data and complete metagenomics analysis
   ------------------------------------------------------------------------- 
   e.g. usage:
transcriptm --paired_end sample1-1.fq.gz sample1-2.fq.gz sample2-1.fq.gz sample2-2.fq.gz --metaG_contigs assembly.fa --dir_bins dir_gff
    '''%(transcriptm.__version__), 
    version = "transcriptm v%s"% transcriptm.__version__,
    formatter_class = CustomHelpFormatter,
    ignored_args = ["recreate_database", "key_legend_in_graph","just_print","target_tasks","jobs","use_threads","forced_tasks","touch_files_only","checksum_file_name","flowchart","draw_graph_horizontally","flowchart_format"])

    # Options   
    parser._optionals.title = "Arguments"
    parser.add_argument("--paired_end",nargs="+", dest="paired_end", help="Input files: paired sequences files of raw metatranscriptomics reads (.fq.gz format)\n  e.g. --paired_end sample1_1.fq.gz sample1_2.fq.gz sample2_1.fq.gz sample2_2.fq.gz",required=True)
    parser.add_argument("--sortmerna_precomputed", dest="sortmerna_precomputed", help="Skip the steps up to and including SortMeRNA")
    parser.add_argument("--metaG_contigs", dest="metaG_contigs", help="All contigs from the reference metagenome in a fasta file",required=True)
    parser.add_argument("--dir_bins", dest="dir_bins", help="Directory which contains several annotated population genomes (bins)\n -> gff format, the others files would be ignored",required=True)
    parser.add_argument("--threads", dest="threads", help="Number of threads to use", default=20, type=int)
    
    # check if the db is an environment variable
    db_path=None    
    try :
        db_path= os.environ['TRANSCRIPTM_DATABASE']
    except KeyError:
        pass 
    if db_path:
        parser.add_argument("--db_path", dest="db_path", help="Directory which contains the TranscriptM databases", default= db_path)
    else :
        parser.add_argument("--db_path", dest="db_path", help="Directory which contains the TranscriptM databases",required=True)
    parser.add_argument("--output_dir", dest="output_dir", help="Output directory ", default='TranscriptM_output')
    
    ### General option: temporary working directory:
    ''' This could be handled better. The default does not need to be and should not be defined here. '''
    parser.add_argument("--working_dir", dest="working_dir", help="Working directory (dynamically created if not specified)", default=objTempDir.name)
	
    # Trimmomatic
    trimm_args=parser.add_argument_group('Trimmomatic options')
    trimm_args.add_argument('--adapters', help="Type of adapters to clip ", choices=['nextera', 'truseq'],default= 'truseq')
    trimm_args.add_argument('--min_len', help="Minimum required length of read ", type=int, default = 30)
    trimm_args.add_argument('--min_avg_qc', help="Minimum average quality score for 4 bp windows ", type=int, default = 25)
    trimm_args.add_argument('--phred', help="Quality encoding ", choices=['phred33', 'phred64'],default='phred33')
    trimm_args.add_argument('--min_qc', help="Minimum quality score for leading and trailing bases ", type=int, default = 20)
    trimm_args.add_argument('--crop', help="Cut read to a specific length ", type=int, default = 10000)
    trimm_args.add_argument('--headcrop', help="Cut specified number of bases from start of read ", type=int, default = 0)
     
    # SortMeRNA
    sortmerna_args=parser.add_argument_group('SortMeRNA options')    
    if db_path:
        path_rRNA = os.path.join(db_path,"1-SortMeRNA/rRNA_databases")
        path_tRNA= os.path.join(db_path,"1-SortMeRNA/tRNA_databases")
        path_index = os.path.join(db_path,"1-SortMeRNA/index")
        db_smr = '%s/silva-bac-16s-id90.fasta,%s/silva-bac-16s-db:%s/silva-bac-23s-id98.fasta,%s/silva-bac-23s-db:'\
        '%s/silva-arc-16s-id95.fasta,%s/silva-arc-16s-db:%s/silva-arc-23s-id98.fasta,%s/silva-arc-23s-db:'\
        '%s/silva-euk-18s-id95.fasta,%s/silva-euk-18s-db:%s/silva-euk-28s-id98.fasta,%s/silva-euk-28s:'\
        '%s/rfam-5s-database-id98.fasta,%s/rfam-5s-db:%s/rfam-5.8s-database-id98.fasta,%s/rfam-5.8s-db:'\
        '%s/rfam-alpha_tmRNA.fa,%s/rfam-alpha_tmRNA-db:%s/rfam-beta_tmRNA.fa,%s/rfam-beta_tmRNA-db:'\
        '%s/rfam-cyano_tmRNA.fa,%s/rfam-cyano_tmRNA-db:%s/rfam-mt_tmRNA.fa,%s/rfam-mt_tmRNA-db:'\
        '%s/rfam-tmRNA.fa,%s/rfam-tmRNA-db:%s/rfam-tRNA.fa,%s/rfam-tRNA-db:'\
        '%s/rfam-tRNA_Sec.fa,%s/rfam-tRNA_Sec-db'%((path_rRNA,path_index)*8+(path_tRNA,path_index)*7)
        sortmerna_args.add_argument('--path_db_smr',help="Path to databases and index\n e.g. path_db1,path_index1:path_db2,path_index2 [default: rRNA and tRNA db]\n NB: index must be created with the script sortmerna/2.0/bin/indexdb_rna",default = db_smr)
    else :
        sortmerna_args.add_argument('--path_db_smr',help="Path to databases and index\n e.g. path_db1,path_index1:path_db2,path_index2\n NB: index must be created with the script sortmerna/2.0/bin/indexdb_rna",required=True)

    # Mapping: BamM filter
    mapping_args=parser.add_argument_group('Mapping options (BamM filter)')
    mapping_args.add_argument('--percentage_id', type=float, dest='percentage_id', help=' Minimum allowable percentage base identity of a mapped read', default=0.97)
    mapping_args.add_argument('--percentage_aln', type=float, dest='percentage_aln', help='Minimum allowable percentage read bases mapped', default=0.95)
    mapping_args.add_argument('--no_mapping_filter',  action="store_true", dest='no_mapping_filter', help='Do not adjust the mapping stringency by filtering alignments', default=False)
    
    return parser

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def further_process_args(args):
    """ performs further validations on `args` (parsed command-line arguments), 
        and creates additional derived args in that namespace.
    """
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
    def valid_SortMeRNA():
        """ performs cursory validation that the SortMeRNA database is indexed.
        """
        if os.path.isdir(os.path.join(args.db_path, "1-SortMeRNA/")) and \
                not os.path.isdir(os.path.join(args.db_path, '1-SortMeRNA/index')):
            ### RKR: DEADCODE? (None of these variables are used again).
            if True:
                path_rRNA = os.path.join(args.db_path,"1-SortMeRNA/rRNA_databases")
                path_tRNA= os.path.join(args.db_path,"1-SortMeRNA/tRNA_databases")
                path_index = os.path.join(args.db_path,"1-SortMeRNA/index")
            ### END_DEADCODE
            raise Exception ("No index found for SortMeRNA database.\n Use the cmdline below: \n" + \
                             "sortmerna/2.0/bin/indexdb_rna --ref path_db1,path_index1:path_db2,path_index2 ")
            exit(1) #RKR: Is this line needed after raising an exception?
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
    valid_SortMeRNA()
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def main_prog():
    """ runs the main program for TranscriptM.
        """
    objTempDir = tempdir.TempDir() # Create a `tempdir` object to be used as a program argument default, just in case the user doesn't specify the working directory. This could be handled better.
    parser = parser_built_with_ruffus(objTempDir) # Initialise a command line parser that is configured with options specific to our program and `ruffus`.
    args = parser.parse_args() # Parse the command line.
    further_process_args(args) # Further argument validation and creation.
    logger, logging_mutex = cmdline.setup_logging (__name__, args.log_file, args.verbose) # logging. #RKR: Is this dead code?
    pl = tm_Pipeline(args)     # Instantiate a custom Pipeline object.
    pl.pipeline_stages()       # This is the method that defines all the pipelined functions; and issues cmdline.run(...)
    pl.clear()                 # 
    objTempDir.dissolve()      # ...behind the scenes: shutil.rmtree(self.name)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    main_prog()
