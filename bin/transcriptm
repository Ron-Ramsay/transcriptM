#!/usr/bin/env python
""" Main callable module to run TranscriptM: a rapid-throughput pipeline of meta-transcriptomes. 
    For project notes, see: http://transcriptm.tiddlyspot.com/ 
"""
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Developer's temporary playground
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 57: Separated pipeline build and pipeline run."
# 58: Implemented full halt_after_stage and restart_from_stage."
print "62: renamed valid_processes class to const."

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python Standard Library modules 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import os        # miscellaneous operating system interfaces. (Python Standard Library module).
import argparse  # parser for command-line options, arguments and sub-commands. (Python Standard Library module).
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# External, non-standard modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import ruffus    # light-weight computational pipeline management. See http://www.ruffus.org.uk.
import tempdir   # encapsulates temporary directories which just disappear after use. 
                 # non-standard module. See https://pypi.python.org/pypi/tempdir/
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Locally written modules
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import transcriptm.__init__
import transcriptm.pipeline as tm_pipeline
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def parser_built_with_ruffus():
    """ returns a command line parser (type: `argparse.ArgumentParser`) that is built with options specific to 
        our program and the module `ruffus`.
    """
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    class CustomHelpFormatter(argparse.HelpFormatter):
        """ This class is a remodelling of `argparse.HelpFormatter`.
            It is used by being passed as a class, to `cmdline.get_argparse(..., formatter_class=CustomHelpFormatter)`.
            However, in doing so, our custom class redefines methods that are not part of `argparse.HelpFormatter`'s 
            API. Therefore there exists the potential for our code to break if these methods 
            (which are supposed to be a non-public implementation) are remodelled in a newer version of `argparse`.
        """
        def _split_lines(self, text, width): # redefinition.
            return text.splitlines()
        def _get_help_string(self, action): # redefinition.
            h = action.help
            if '%(default)' not in action.help:
                if action.default != '' and action.default != [] and action.default != None:
                    if action.default is not argparse.SUPPRESS:
                        defaulting_nargs = [argparse.OPTIONAL, argparse.ZERO_OR_MORE]
                        if (action.option_strings or action.nargs in defaulting_nargs) :
                            if not (type(action.default)==str and len(action.default)>50):
                                if '\n' in h:
                                    lines = h.splitlines()
                                    lines[0] += ' [default: %(default)s]'
                                    h = '\n'.join(lines)
                                else:
                                    h += ' [default: %(default)s]'
            if action.required:
                if '\n' in h:
                    lines = h.splitlines()
                    lines[0] += ' \033[0;32m|REQUIRED\033[00m'
                    h = '\n'.join(lines)
                else:
                    h += ' \033[0;32m|REQUIRED\033[00m'
            return h
        def _fill_text(self, text, width, indent): # redefinition.
            return ''.join([indent + line for line in text.splitlines(True)])
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Instantiate the parser.
    parser = ruffus.cmdline.get_argparse(
        description = '\n'\
            '                    ==============================                           \n'\
            '                           TranscriptM v{0}                                  \n'\
            '                    ==============================                           \n'\
            '                                                                             \n'\
            '   ------------------------------------------------------------------------- \n'\
            '       Process metatranscriptomic data and complete metagenomics analysis    \n'\
            '   ------------------------------------------------------------------------- \n'\
            '   e.g. usage:                                                               \n'\
            'transcriptm --paired_end sample1-1.fq.gz sample1-2.fq.gz sample2-1.fq.gz sample2-2.fq.gz '+\
            '--metaG_contigs assembly.fa --dir_bins dir_gff' \
            .format(transcriptm.__version__), 
        version = "transcriptm v{0}".format(transcriptm.__version__),
        formatter_class = CustomHelpFormatter,
        ignored_args = ["recreate_database", "key_legend_in_graph", "just_print", "jobs",
                        "use_threads", "forced_tasks", "touch_files_only", "checksum_file_name"] 
                        # "target_tasks", "flowchart", "draw_graph_horizontally", "flowchart_format"]
        )
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # General options:
    parser._optionals.title = "General options" 
        # Overwrite the hard-coded title 'optional arguments' for this group of arguments, 
        # because, presumably, most of these arguments are not optional.
        # This call seems to delve behind the class's public interface, so this code 
        # has the potential to break if the underlying implementation is changed in the future.

    parser.add_argument("--paired_end", nargs="+", dest="paired_end", required=True,
            help="Input files: paired sequences files of raw metatranscriptomics reads (.fq.gz format)\n" +\
            "e.g. --paired_end sample1_1.fq.gz sample1_2.fq.gz sample2_1.fq.gz sample2_2.fq.gz")

    parser.add_argument("--metaG_contigs", dest="metaG_contigs", required=True, 
            help="All contigs from the reference metagenome in a fasta file")

    parser.add_argument("--dir_bins", dest="dir_bins", required=True,
            help="Directory which contains several annotated population genomes (bins)\n" +\
            "-> gff format, the others files would be ignored")

    parser.add_argument("--threads", dest="threads", default=20, type=int, help="Number of threads to use")

    parser.add_argument("--halt_after_stage", dest="halt_after_stage",
            help=\
            "An intermediate stage; after this stage is completed, the pipeline run will halt.\n"\
            "Available options are as follows. Use either the ID (without the bracket) OR the text-string:\n"\
            + tm_pipeline.const.valid_stages_str() +\
            "IMPORTANT: The pipeline may later be restarted from the next stage, but note:\n "\
            "(i) the same `--paired_end` arguments must be supplied "\
            "in exactly the SAME ORDER as before,\n else mismatching will occur; and "\
            "(ii) the `--working_dir` argument must be specified explicitly,\n"\
            " and the data must be retained in the specified directory between runs.")

    parser.add_argument("--restart_from_stage", dest="restart_from_stage",
            help=\
            "An intermediate stage to restart from, using previously saved data in the `--working_dir` directory.\n"\
            "Available options are the same as per option `--halt_after_stage`.\n"\
            "NB. See very important notes in the help for option `--halt_after_completing`.")

    # General option: TranscriptM database path:
    db_path=None    
    try :
        db_path = os.environ['TRANSCRIPTM_DATABASE'] # Check if the db is an environment variable.
    except KeyError:
        pass 
    if db_path:
        parser.add_argument("--db_path", dest="db_path", default= db_path, 
                help="Directory which contains the TranscriptM databases")
    else:
        parser.add_argument("--db_path", dest="db_path", required=True, 
                help="Directory which contains the TranscriptM databases")

    parser.add_argument("--output_dir", dest="output_dir", default='TranscriptM_output', help="Output directory ")

    # General option: working directory:
    parser.add_argument("--working_dir", dest="working_dir", 
            help=\
            "Working directory (which will be created if it does not exist).\n"\
            "Specifying a working directory is essential if `--halt_after_stage` or `--restart_from_stage`\n"\
            " are required in this run or a future restarted run.\n"\
            "If a working directory is not specified, a temporary directory is dynamically created and disposed of.")

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Trimmomatic options:
    trimm_args=parser.add_argument_group('Trimmomatic options')
    trimm_args.add_argument('--adapters', choices=['nextera', 'truseq'], default='truseq', 
                                    help="Type of adapters to clip")
    trimm_args.add_argument('--min_len', help="Minimum required length of read", type=int, default = 30)
    trimm_args.add_argument('--min_avg_qc', type=int, default=25, 
                                    help="Minimum average quality score for 4 bp windows")
    trimm_args.add_argument('--phred', help="Quality encoding", choices=['phred33', 'phred64'],default='phred33')
    trimm_args.add_argument('--min_qc', type=int, default=20, 
                                    help="Minimum quality score for leading and trailing bases")
    trimm_args.add_argument('--crop', help="Cut read to a specific length", type=int, default = 10000)
    trimm_args.add_argument('--headcrop', help="Cut specified number of bases from start of read", type=int, default=0)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # SortMeRNA options:
    sortmerna_args=parser.add_argument_group('SortMeRNA options')    
    if db_path:
        path_rRNA = os.path.join(db_path, "1-SortMeRNA/rRNA_databases")
        path_tRNA = os.path.join(db_path, "1-SortMeRNA/tRNA_databases")
        path_index = os.path.join(db_path, "1-SortMeRNA/index")
        db_smr =\
            '%s/silva-bac-16s-id90.fasta,%s/silva-bac-16s-db:'\
            '%s/silva-bac-23s-id98.fasta,%s/silva-bac-23s-db:'\
            '%s/silva-arc-16s-id95.fasta,%s/silva-arc-16s-db:'\
            '%s/silva-arc-23s-id98.fasta,%s/silva-arc-23s-db:'\
            '%s/silva-euk-18s-id95.fasta,%s/silva-euk-18s-db:'\
            '%s/silva-euk-28s-id98.fasta,%s/silva-euk-28s:'\
            '%s/rfam-5s-database-id98.fasta,%s/rfam-5s-db:'\
            '%s/rfam-5.8s-database-id98.fasta,%s/rfam-5.8s-db:'\
            '%s/rfam-alpha_tmRNA.fa,%s/rfam-alpha_tmRNA-db:'\
            '%s/rfam-beta_tmRNA.fa,%s/rfam-beta_tmRNA-db:'\
            '%s/rfam-cyano_tmRNA.fa,%s/rfam-cyano_tmRNA-db:'\
            '%s/rfam-mt_tmRNA.fa,%s/rfam-mt_tmRNA-db:'\
            '%s/rfam-tmRNA.fa,%s/rfam-tmRNA-db:'\
            '%s/rfam-tRNA.fa,%s/rfam-tRNA-db:'\
            '%s/rfam-tRNA_Sec.fa,%s/rfam-tRNA_Sec-db'\
            % ((path_rRNA, path_index)*8+(path_tRNA, path_index)*7)
        sortmerna_args.add_argument('--path_db_smr', default=db_smr, 
            help="Path to databases and index\n" + \
                "e.g. path_db1,path_index1:path_db2,path_index2 [default: rRNA and tRNA db]\n" + \
                "NB: index must be created with the script sortmerna/2.0/bin/indexdb_rna")
    else:
        sortmerna_args.add_argument('--path_db_smr', required=True,
            help="Path to databases and index\n e.g. path_db1,path_index1:path_db2,path_index2\n" + \
                "NB: index must be created with the script sortmerna/2.0/bin/indexdb_rna")
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Mapping options (BamM filter):
    mapping_args=parser.add_argument_group('Mapping options (BamM filter)')
    mapping_args.add_argument('--percentage_id', type=float, dest='percentage_id', default=0.97, 
                              help='Minimum allowable percentage base identity of a mapped read')
    mapping_args.add_argument('--percentage_aln', type=float, default=0.95, dest='percentage_aln', 
                              help='Minimum allowable percentage read bases mapped')
    mapping_args.add_argument('--no_mapping_filter',  action="store_true", dest='no_mapping_filter', default=False, 
                              help='Do not adjust the mapping stringency by filtering alignments')
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return parser
    
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def further_process_args(args):
    """ performs further validations on `args` (parsed command-line arguments), 
        and creates additional derived args in that namespace.
    """
    ''' Note: vars(args) can be used to update the `args` Namespace object as a virtual dictionary. 
            i.e. it is synonymous with `args._dict__`
            ref. documentation at https://docs.python.org/2.7/library/functions.html#vars
    '''
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def V_stages():
        """ checks supplied arguments `--halt_after_stage` and `--restart_from_stage`. """
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # validate this parameter:
        if args.halt_after_stage: # check this parameter only if it was specified.
            badness = False # initialize flag.
            if args.halt_after_stage[0].isdigit(): # Stage begins with a digit, so is a stage id.
                if args.halt_after_stage not in tm_pipeline.const.valid_stages_dict().keys(): 
                    badness = True
            else:
                if args.halt_after_stage not in tm_pipeline.const.valid_stages_dict().values():
                    badness = True
            if badness:                    
                raise Exception(
                    "\nStage <{0}> specified in --halt_after_stage is not valid,\n".format(args.halt_after_stage) +\
                    "i.e. not a valid ID or NAME (choose just either an ID or name) from the following:\n" \
                     + tm_pipeline.const.valid_stages_str())
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # validate this parameter:
        if args.restart_from_stage: # check this parameter only if it was specified.
            badness = False # initialize flag.
            if args.restart_from_stage[0].isdigit(): # Stage begins with a digit, so is a stage id.
                if args.restart_from_stage not in tm_pipeline.const.valid_stages_dict().keys(): 
                    badness = True
            else:
                if args.restart_from_stage not in tm_pipeline.const.valid_stages_dict().values():
                    badness = True
            if badness:                    
                raise Exception(
                    "\nStage <{0}> specified in `--restart_from_stage` is not valid,\n"\
                    .format(args.restart_from_stage) +\
                    "i.e. not a valid ID or NAME (choose just either an ID or name) from the following:\n" \
                     + tm_pipeline.const.valid_stages_str())
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # Check if a working directory needs to be specified.
        if (args.halt_after_stage or args.restart_from_stage) and not args.working_dir:                    
            raise Exception(
                "\nWorking directory `--working_dir` must be specified when either "\
                "`--halt_after_stage` or `--restart_from_stage` are used.")
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # Ensure the halt-stage is not earlier in the pipeline than the restart-stage.
        if (args.halt_after_stage and args.restart_from_stage):
#            print "***", tm_pipeline.const.valid_stage_ID(args.halt_after_stage)
#            print "***", tm_pipeline.const.valid_stage_ID(args.restart_from_stage)
            if \
              float(tm_pipeline.const.valid_stage_ID(args.halt_after_stage)) < \
              float(tm_pipeline.const.valid_stage_ID(args.restart_from_stage)
                ):
                raise Exception(
                "\nThe `--halt_after_stage` <{0} {1}> must not be earlier in the pipeline than ".format(
                tm_pipeline.const.valid_stage_ID(args.halt_after_stage), 
                tm_pipeline.const.valid_stages_dict().get(args.halt_after_stage, args.halt_after_stage)) +\
                "the `--restart_from_stage` <{0} {1}>.".format(
                tm_pipeline.const.valid_stage_ID(args.restart_from_stage), 
                tm_pipeline.const.valid_stages_dict().get(args.restart_from_stage, args.restart_from_stage))
                )
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def V_paired_end():
        """ checks that all the paired end files exist. """
        for filename in args.paired_end:
            if not os.path.isfile(filename):
                raise Exception("File <{0}> specified in --paired_end does not exist.".format(filename))
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def V_working_dir():
        """ if the `working_dir` is not specified, creates a temporary directory that will be automatically dissolved.
        """
        if not args.working_dir:
            vars(args)['working_dir'] = tempdir.TempDir().name
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def V_adaptersFile():
        """ creates a new arg `adaptersFile`, pointing to an expected file location under `db_path`, 
            and tests for the presence of that file. 
        """
        # Get the folder where the adapters file should exist.
        adapters_folder = os.path.join(args.db_path, "0-Adapters") 
        # Select the type of filename, based on user parameter `adapters`.
        adapters_basename = {'truseq':'TruSeq3-PE-2.fa', 'nextera':'NexteraPE-PE.fa'}.get(args.adapters) 
        # Creation of new arg: 
        vars(args)['adaptersFile'] = os.path.join(adapters_folder, adapters_basename) 
        # Validate that the file exists.
        if not os.path.isfile(args.adaptersFile):
            raise Exception(
                "The subdirectory `0-Adapters` or the file `%s` does not exist in `%s` (the db_path provided)"
                %(os.path.basename(args.adaptersFile), args.db_path))
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def V_SortMeRNA():
        """ performs cursory validation that the SortMeRNA database is indexed. """
        if os.path.isdir(os.path.join(args.db_path, "1-SortMeRNA/")) and \
                not os.path.isdir(os.path.join(args.db_path, '1-SortMeRNA/index')):
            raise Exception(
                "No index found for SortMeRNA database.\nUse the cmdline below:\n" + \
                "sortmerna/2.0/bin/indexdb_rna --ref path_db1,path_index1:path_db2,path_index2")
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    V_stages()
    V_paired_end() 
    V_working_dir()
    V_adaptersFile()
    V_SortMeRNA()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def debug_namespace(namespace):
    """ helper: for debugging command line arguments. """
    print
    for (index, val) in vars(namespace).items():
        print "> {0}: {2} {1}".format(index, type(val), val)
    print
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def main_prog():
    """ main program control. """
    parser = parser_built_with_ruffus()    # Initialise a custom Rufus commond-line parser.
    args = parser.parse_args()             # Parse the command line.
    further_process_args(args)             # Perform further argument validation and creation.
    #debug_namespace(args)                 # for debugging.
    pl = tm_pipeline.pipeline_object(args) # Instantiate a custom Pipeline object.
    pl.build_pipeline_stages()
    pl.run_built_pipeline()
    pl.clear()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    main_prog()
